#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Programme de calcul de similarit√© de Jaccard entre phrases
Projet de Machine Learning non Supervis√©

Auteurs: [Votre groupe]
Date: Septembre 2025

La similarit√© de Jaccard mesure la ressemblance entre deux ensembles
en calculant le rapport entre l'intersection et l'union des ensembles.
Formule: Jaccard(A,B) = |A ‚à© B| / |A ‚à™ B|
"""

import re
import argparse
from typing import Set, List, Tuple, Dict


class JaccardSimilarity:
    """
    Classe pour calculer la similarit√© de Jaccard entre phrases.

    Attributes:
        case_sensitive (bool): Si True, respecte la casse des mots
        remove_punctuation (bool): Si True, supprime la ponctuation
    """

    def __init__(self, case_sensitive: bool = False, remove_punctuation: bool = True):
        """
        Initialise le calculateur de similarit√©.

        Args:
            case_sensitive (bool): Si True, respecte la casse des mots
            remove_punctuation (bool): Si True, supprime la ponctuation
        """
        self.case_sensitive = case_sensitive
        self.remove_punctuation = remove_punctuation

    def preprocess_sentence(self, sentence: str) -> Set[str]:
        """
        Pr√©traite une phrase en la convertissant en ensemble de mots.

        Args:
            sentence (str): La phrase √† pr√©traiter

        Returns:
            Set[str]: Ensemble des mots de la phrase

        Exemple:
            >>> calc = JaccardSimilarity()
            >>> calc.preprocess_sentence("Hello, World!")
            {'hello', 'world'}
        """
        # Conversion en minuscules si n√©cessaire
        if not self.case_sensitive:
            sentence = sentence.lower()

        # Nettoyage de la ponctuation
        if self.remove_punctuation:
            sentence = re.sub(r'[^a-zA-Z√Ä-√ø\s]', ' ', sentence)

        # S√©paration en mots individuels et cr√©ation de l'ensemble
        words = set(word.strip() for word in sentence.split() if word.strip())

        return words

    def calculate_similarity(self, sentence1: str, sentence2: str) -> float:
        """
        Calcule la similarit√© de Jaccard entre deux phrases.

        Args:
            sentence1 (str): Premi√®re phrase
            sentence2 (str): Deuxi√®me phrase

        Returns:
            float: Similarit√© de Jaccard (entre 0 et 1)

        Exemple:
            >>> calc = JaccardSimilarity()
            >>> calc.calculate_similarity("Le chat mange", "Le chien mange")
            0.6666666666666666
        """
        # Pr√©traitement des deux phrases
        set1 = self.preprocess_sentence(sentence1)
        set2 = self.preprocess_sentence(sentence2)

        # Calcul de l'intersection et de l'union
        intersection = set1.intersection(set2)
        union = set1.union(set2)

        # Gestion du cas o√π l'union est vide
        if len(union) == 0:
            return 0.0

        # Application de la formule de Jaccard
        similarity = len(intersection) / len(union)

        return similarity

    def calculate_similarity_detailed(self, sentence1: str, sentence2: str) -> Dict:
        """
        Calcule la similarit√© de Jaccard avec les d√©tails du calcul.

        Args:
            sentence1 (str): Premi√®re phrase
            sentence2 (str): Deuxi√®me phrase

        Returns:
            dict: Dictionnaire contenant les d√©tails du calcul incluant les ensembles,
                  l'intersection, l'union et la similarit√©
        """
        set1 = self.preprocess_sentence(sentence1)
        set2 = self.preprocess_sentence(sentence2)

        intersection = set1.intersection(set2)
        union = set1.union(set2)

        similarity = len(intersection) / len(union) if len(union) > 0 else 0.0

        return {
            'sentence1': sentence1,
            'sentence2': sentence2,
            'words_set1': set1,
            'words_set2': set2,
            'intersection': intersection,
            'union': union,
            'intersection_size': len(intersection),
            'union_size': len(union),
            'jaccard_similarity': similarity
        }

    def compare_multiple_sentences(self, sentences: List[str]) -> List[Tuple[int, int, float]]:
        """
        Compare toutes les paires de phrases dans une liste.

        Args:
            sentences (List[str]): Liste des phrases √† comparer

        Returns:
            List[Tuple[int, int, float]]: Liste de tuples (index1, index2, similarit√©)
        """
        results = []

        for i in range(len(sentences)):
            for j in range(i + 1, len(sentences)):
                similarity = self.calculate_similarity(
                    sentences[i], sentences[j])
                results.append((i, j, similarity))

        return results

    def get_similarity_matrix(self, sentences: List[str]) -> List[List[float]]:
        """
        Calcule la matrice de similarit√© pour une liste de phrases.

        Args:
            sentences (List[str]): Liste des phrases √† comparer

        Returns:
            List[List[float]]: Matrice de similarit√© carr√©e
        """
        n = len(sentences)
        matrix = [[0.0 for _ in range(n)] for _ in range(n)]

        for i in range(n):
            for j in range(n):
                if i == j:
                    matrix[i][j] = 1.0
                else:
                    matrix[i][j] = self.calculate_similarity(
                        sentences[i], sentences[j])

        return matrix

    def get_most_similar_pair(self, sentences: List[str]) -> Tuple[int, int, float]:
        """
        Trouve la paire de phrases la plus similaire.

        Args:
            sentences (List[str]): Liste des phrases √† comparer

        Returns:
            Tuple[int, int, float]: (index1, index2, similarit√©_max)
        """
        comparisons = self.compare_multiple_sentences(sentences)

        if not comparisons:
            return (0, 0, 0.0)

        return max(comparisons, key=lambda x: x[2])

    def interpret_similarity(self, similarity: float, context: str = "general") -> Dict[str, str]:
        """
        Interpr√®te un score de similarit√© de Jaccard de mani√®re d√©taill√©e.

        Args:
            similarity (float): Score de similarit√© entre 0 et 1
            context (str): Contexte d'utilisation ('general', 'plagiarism', 'clustering', 'search')

        Returns:
            Dict[str, str]: Dictionnaire contenant l'interpr√©tation d√©taill√©e
        """
        # Cat√©gorisation du score
        if similarity == 1.0:
            category = "Identique"
            emoji = "‚úÖ"
            color_code = "green"
        elif similarity >= 0.8:
            category = "Tr√®s similaire"
            emoji = "üü¢"
            color_code = "green"
        elif similarity >= 0.6:
            category = "Assez similaire"
            emoji = "üü°"
            color_code = "yellow"
        elif similarity >= 0.4:
            category = "Moyennement similaire"
            emoji = "üü†"
            color_code = "orange"
        elif similarity >= 0.2:
            category = "Peu similaire"
            emoji = "üî¥"
            color_code = "red"
        elif similarity > 0:
            category = "Tr√®s peu similaire"
            emoji = "‚ö´"
            color_code = "dark_red"
        else:
            category = "Aucune similarit√©"
            emoji = "‚ùå"
            color_code = "black"

        # Interpr√©tation g√©n√©rale
        general_interpretation = self._get_general_interpretation(similarity)

        # Interpr√©tation contextuelle
        contextual_interpretation = self._get_contextual_interpretation(
            similarity, context)

        # Recommandations
        recommendations = self._get_recommendations(similarity, context)

        # Explication technique
        technical_explanation = self._get_technical_explanation(similarity)

        return {
            'score': similarity,
            'category': category,
            'emoji': emoji,
            'color_code': color_code,
            'general_interpretation': general_interpretation,
            'contextual_interpretation': contextual_interpretation,
            'recommendations': recommendations,
            'technical_explanation': technical_explanation
        }

    def _get_general_interpretation(self, similarity: float) -> str:
        """Fournit une interpr√©tation g√©n√©rale du score."""
        if similarity == 1.0:
            return ("Les deux phrases sont parfaitement identiques. Tous les mots sont communs "
                    "et aucun mot unique n'existe dans l'une ou l'autre phrase.")
        elif similarity >= 0.8:
            return ("Les phrases partagent la grande majorit√© de leurs mots. Elles expriment "
                    "probablement des id√©es tr√®s proches avec une formulation similaire.")
        elif similarity >= 0.6:
            return ("Les phrases ont une base commune importante mais contiennent aussi des "
                    "diff√©rences notables. Elles traitent probablement du m√™me sujet mais "
                    "avec des nuances.")
        elif similarity >= 0.4:
            return ("Les phrases partagent certains mots-cl√©s mais diff√®rent sensiblement. "
                    "Elles peuvent traiter de sujets connexes ou utiliser un vocabulaire commun "
                    "dans des contextes diff√©rents.")
        elif similarity >= 0.2:
            return ("Les phrases ont quelques mots en commun, probablement des mots fr√©quents "
                    "ou g√©n√©riques. Elles sont globalement diff√©rentes dans leur contenu.")
        elif similarity > 0:
            return ("Les phrases partagent tr√®s peu de mots. Il peut s'agir de mots tr√®s "
                    "courants (articles, pr√©positions) sans lien s√©mantique fort.")
        else:
            return ("Aucun mot n'est partag√© entre les deux phrases. Elles traitent de "
                    "sujets compl√®tement diff√©rents ou utilisent des vocabulaires distincts.")

    def _get_contextual_interpretation(self, similarity: float, context: str) -> str:
        """Fournit une interpr√©tation selon le contexte d'utilisation."""
        interpretations = {
            'plagiarism': {
                1.0: "üö® PLAGIAT CERTAIN - Copie int√©grale d√©tect√©e",
                0.8: "‚ö†Ô∏è  PLAGIAT TR√àS PROBABLE - Similarit√© suspecte, n√©cessite une v√©rification",
                0.6: "‚ö†Ô∏è  SUSPICION √âLEV√âE - Peut indiquer une paraphrase ou r√©arrangement",
                0.4: "‚ö° SUSPICION MOD√âR√âE - Quelques √©l√©ments communs, √† examiner",
                0.2: "‚úì SUSPICION FAIBLE - Probablement du contenu original",
                0.0: "‚úì CONTENU ORIGINAL - Aucune similarit√© d√©tect√©e"
            },
            'clustering': {
                1.0: "üìÇ CLUSTER IDENTIQUE - Documents identiques ou doublons",
                0.8: "üìÇ CLUSTER FORT - Documents tr√®s li√©s, m√™me cat√©gorie",
                0.6: "üìÇ CLUSTER MOD√âR√â - Documents connexes, possiblement m√™me th√®me",
                0.4: "üìÇ CLUSTER FAIBLE - Quelques liens, cat√©gories voisines possibles",
                0.2: "üìÇ PAS DE CLUSTER - Documents distincts",
                0.0: "üìÇ TOTALEMENT DISTINCTS - Aucun lien apparent"
            },
            'search': {
                1.0: "üéØ PERTINENCE MAXIMALE - Correspondance parfaite avec la requ√™te",
                0.8: "üéØ TR√àS PERTINENT - Contient la plupart des termes de recherche",
                0.6: "üéØ PERTINENT - Bon match avec plusieurs termes cl√©s",
                0.4: "üéØ PARTIELLEMENT PERTINENT - Contient quelques termes de recherche",
                0.2: "üéØ PEU PERTINENT - Match faible avec la requ√™te",
                0.0: "üéØ NON PERTINENT - Aucun terme de recherche trouv√©"
            },
            'general': {
                1.0: "Les phrases sont identiques",
                0.8: "Tr√®s haute similarit√© - Contenu tr√®s proche",
                0.6: "Bonne similarit√© - Sujet probablement commun",
                0.4: "Similarit√© mod√©r√©e - Quelques √©l√©ments partag√©s",
                0.2: "Faible similarit√© - Peu d'√©l√©ments communs",
                0.0: "Aucune similarit√© d√©tect√©e"
            }
        }

        context_interp = interpretations.get(
            context, interpretations['general'])

        # S√©lection de l'interpr√©tation appropri√©e
        if similarity == 1.0:
            return context_interp[1.0]
        elif similarity >= 0.8:
            return context_interp[0.8]
        elif similarity >= 0.6:
            return context_interp[0.6]
        elif similarity >= 0.4:
            return context_interp[0.4]
        elif similarity >= 0.2:
            return context_interp[0.2]
        else:
            return context_interp[0.0]

    def _get_recommendations(self, similarity: float, context: str) -> List[str]:
        """Fournit des recommandations bas√©es sur le score et le contexte."""
        recommendations = []

        if context == 'plagiarism':
            if similarity >= 0.8:
                recommendations.extend([
                    "V√©rifier manuellement le document source",
                    "Comparer les citations et r√©f√©rences",
                    "Utiliser des outils de d√©tection plus avanc√©s",
                    "Contacter l'auteur pour clarification"
                ])
            elif similarity >= 0.5:
                recommendations.extend([
                    "Examiner les passages sp√©cifiques similaires",
                    "V√©rifier si une paraphrase est appropri√©e",
                    "S'assurer que les sources sont cit√©es"
                ])

        elif context == 'clustering':
            if similarity >= 0.6:
                recommendations.extend([
                    "Regrouper ces documents dans le m√™me cluster",
                    "Analyser les th√®mes communs pour mieux les cat√©goriser"
                ])
            elif similarity >= 0.3:
                recommendations.append(
                    "Consid√©rer comme potentiellement li√©s, v√©rifier manuellement")

        elif context == 'search':
            if similarity >= 0.4:
                recommendations.append(
                    "Document pertinent, √† inclure dans les r√©sultats")
            else:
                recommendations.append(
                    "Document peu pertinent, peut √™tre exclu des r√©sultats")

        # Recommandations g√©n√©rales selon le score
        if similarity == 0.0:
            recommendations.append(
                "Aucun mot commun - V√©rifier le pr√©traitement des textes")
        elif similarity < 0.3 and len(recommendations) == 0:
            recommendations.append(
                "Similarit√© faible - Ces textes traitent probablement de sujets diff√©rents")

        return recommendations if recommendations else ["Aucune recommandation sp√©cifique"]

    def _get_technical_explanation(self, similarity: float) -> str:
        """Fournit une explication technique du score."""
        percentage = similarity * 100

        explanation = f"Score de Jaccard: {similarity:.4f} ({percentage:.2f}%)\n\n"

        if similarity == 1.0:
            explanation += ("L'intersection des ensembles de mots √©gale leur union. "
                            "Math√©matiquement: |A ‚à© B| = |A ‚à™ B|")
        elif similarity >= 0.5:
            explanation += (f"Environ {percentage:.0f}% des mots de l'union sont partag√©s. "
                            f"Cela signifie qu'environ {100-percentage:.0f}% des mots sont uniques "
                            f"√† l'une ou l'autre phrase.")
        else:
            explanation += (f"Seulement {percentage:.0f}% des mots de l'union sont communs. "
                            f"La majorit√© ({100-percentage:.0f}%) des mots sont sp√©cifiques "
                            f"√† chaque phrase.")

        return explanation


def run_example_tests(calculator: JaccardSimilarity):
    """
    Ex√©cute des tests d'exemple pour d√©montrer le fonctionnement.

    Args:
        calculator (JaccardSimilarity): Instance du calculateur
    """
    print("=== Programme de Calcul de Similarit√© de Jaccard ===\n")

    # D√©finition des cas de test
    examples = [
        ("Le chat mange des croquettes", "Le chien mange des os"),
        ("Python est un langage de programmation",
         "Java est un langage de programmation"),
        ("Machine learning supervis√©", "Apprentissage automatique supervis√©"),
        ("Bonjour tout le monde", "Salut tout le monde"),
        ("Aucun mot en commun", "Diff√©rentes phrases compl√®tement")
    ]

    print("1. Tests de base avec interpr√©tations :")
    print("-" * 80)
    for i, (s1, s2) in enumerate(examples, 1):
        similarity = calculator.calculate_similarity(s1, s2)
        interpretation = calculator.interpret_similarity(
            similarity, context='general')

        print(f"\nTest {i}:")
        print(f"  Phrase 1: '{s1}'")
        print(f"  Phrase 2: '{s2}'")
        print(f"  Similarit√©: {similarity:.4f}")
        print(
            f"  Cat√©gorie: {interpretation['emoji']} {interpretation['category']}")
        print(f"\n  üí° Interpr√©tation:")
        print(f"     {interpretation['general_interpretation']}")
        print(f"\n  üìä Contexte:")
        print(f"     {interpretation['contextual_interpretation']}")
        print("-" * 80)

    print("\n2. Analyse d√©taill√©e avec recommandations :")
    print("-" * 80)
    detailed = calculator.calculate_similarity_detailed(
        "Le chat mange", "Le chien mange")

    similarity = detailed['jaccard_similarity']
    interpretation = calculator.interpret_similarity(
        similarity, context='general')

    print(f"Phrase 1: '{detailed['sentence1']}'")
    print(f"Phrase 2: '{detailed['sentence2']}'")
    print(f"\nMots phrase 1: {sorted(detailed['words_set1'])}")
    print(f"Mots phrase 2: {sorted(detailed['words_set2'])}")
    print(f"\nIntersection (mots communs): {sorted(detailed['intersection'])}")
    print(f"Union (tous les mots): {sorted(detailed['union'])}")
    print(f"\nTaille intersection: {detailed['intersection_size']}")
    print(f"Taille union: {detailed['union_size']}")
    print(f"\nSimilarit√© Jaccard: {similarity:.4f}")
    print(f"Cat√©gorie: {interpretation['emoji']} {interpretation['category']}")

    print(f"\nüìñ Explication technique:")
    print(f"   {interpretation['technical_explanation']}")

    print(f"\nüí° Interpr√©tation g√©n√©rale:")
    print(f"   {interpretation['general_interpretation']}")

    print(f"\nüìå Recommandations:")
    for rec in interpretation['recommendations']:
        print(f"   ‚Ä¢ {rec}")
    print("-" * 80)

    print("\n3. Matrice de similarit√© avec interpr√©tations :")
    print("-" * 80)
    test_sentences = [
        "Le chat mange",
        "Le chien mange",
        "Les animaux mangent",
        "Python est g√©nial"
    ]

    matrix = calculator.get_similarity_matrix(test_sentences)

    print("Phrases test√©es :")
    for i, sentence in enumerate(test_sentences):
        print(f"  {i}: '{sentence}'")
    print()

    print("Matrice de similarit√© :")
    print("     ", end="")
    for i in range(len(test_sentences)):
        print(f"{i:8}", end="")
    print()

    for i, row in enumerate(matrix):
        print(f"{i}: ", end="")
        for similarity in row:
            print(f"{similarity:8.4f}", end="")
        print()

    # Interpr√©tations des relations
    print("\nüìä Interpr√©tations des relations:")
    for i in range(len(test_sentences)):
        for j in range(i + 1, len(test_sentences)):
            sim = matrix[i][j]
            interp = calculator.interpret_similarity(sim, context='clustering')
            print(
                f"\nPhrases {i} ‚Üî {j}: {sim:.4f} - {interp['emoji']} {interp['category']}")
            print(f"  {interp['contextual_interpretation']}")


def interactive_mode(calculator: JaccardSimilarity):
    """
    Mode interactif pour saisir des phrases manuellement.

    Args:
        calculator (JaccardSimilarity): Instance du calculateur
    """
    print("=== Mode Interactif - Calculateur de Similarit√© de Jaccard ===")
    print("Entrez 'quit' pour quitter\n")

    while True:
        sentence1 = input("Phrase 1: ").strip()
        if sentence1.lower() == 'quit':
            break

        sentence2 = input("Phrase 2: ").strip()
        if sentence2.lower() == 'quit':
            break

        similarity = calculator.calculate_similarity(sentence1, sentence2)
        interpretation = calculator.interpret_similarity(
            similarity, context='general')

        print(f"\n{'='*70}")
        print(f"R√âSULTAT DE LA COMPARAISON")
        print(f"{'='*70}")
        print(f"\nSimilarit√© de Jaccard: {similarity:.4f}")
        print(
            f"Cat√©gorie: {interpretation['emoji']} {interpretation['category']}")

        # Affichage des informations compl√©mentaires
        set1 = calculator.preprocess_sentence(sentence1)
        set2 = calculator.preprocess_sentence(sentence2)
        intersection = set1.intersection(set2)

        print(
            f"\nMots communs: {sorted(intersection)} ({len(intersection)} mots)")
        print(f"Total mots uniques: {len(set1.union(set2))} mots")

        print(f"\nüí° Interpr√©tation:")
        print(f"   {interpretation['general_interpretation']}")

        print(f"\nüìñ Explication technique:")
        for line in interpretation['technical_explanation'].split('\n'):
            print(f"   {line}")

        print(f"\nüìå Recommandations:")
        for rec in interpretation['recommendations']:
            print(f"   ‚Ä¢ {rec}")

        print("-" * 70)
        print()


def main():
    """Fonction principale avec interface en ligne de commande."""
    parser = argparse.ArgumentParser(
        description='Calcul de similarit√© de Jaccard entre phrases',
        epilog='Exemple: python jaccard_similarity.py --interactive'
    )
    parser.add_argument('--case-sensitive', action='store_true',
                        help='Respecte la casse des mots')
    parser.add_argument('--keep-punctuation', action='store_true',
                        help='Garde la ponctuation')
    parser.add_argument('--interactive', action='store_true',
                        help='Mode interactif pour saisir des phrases')

    args = parser.parse_args()

    # Configuration du calculateur selon les arguments
    calculator = JaccardSimilarity(
        case_sensitive=args.case_sensitive,
        remove_punctuation=not args.keep_punctuation
    )

    if args.interactive:
        interactive_mode(calculator)
    else:
        run_example_tests(calculator)


if __name__ == "__main__":
    main()
