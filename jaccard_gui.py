#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Interface graphique COMPL√àTE pour le calculateur de similarit√© de Jaccard
Version 2.2 - TOUTES LES FONCTIONNALIT√âS

Auteurs: OUEDRAOGO Lassina, OUEDRAOGO Rasmane, POUBERE Abdourazakou
Date: Octobre 2025

Impl√©mente TOUTES les fonctionnalit√©s de jaccard_similarity.py
"""

import tkinter as tk
from tkinter import ttk, scrolledtext, messagebox, filedialog
from typing import List, Dict
import sys
import os
from datetime import datetime

from jaccard_similarity import JaccardSimilarity, FrenchStemmer


class JaccardGUI:
    """Interface graphique compl√®te avec TOUTES les fonctionnalit√©s."""

    def __init__(self, root):
        """Initialise l'interface graphique."""
        self.root = root
        self.root.title("Calculateur de Jaccard v2.2 - Interface Compl√®te")

        self.root.geometry("1300x950")
        self.root.minsize(1000, 750)

        # Configuration responsive
        self.root.rowconfigure(0, weight=0)
        self.root.rowconfigure(1, weight=0)
        self.root.rowconfigure(2, weight=1)
        self.root.rowconfigure(3, weight=0)
        self.root.columnconfigure(0, weight=1)

        style = ttk.Style()
        style.theme_use('clam')

        self.colors = {
            'primary': '#2C3E50',
            'secondary': '#3498DB',
            'success': '#27AE60',
            'warning': '#F39C12',
            'danger': '#E74C3C',
            'light': '#ECF0F1',
            'dark': '#34495E',
            'purple': '#9B59B6'
        }

        self.calculator = JaccardSimilarity()

        # Variables pour les options
        self.case_sensitive = tk.BooleanVar(value=False)
        self.remove_punctuation = tk.BooleanVar(value=True)
        self.remove_stopwords = tk.BooleanVar(value=False)
        self.use_stemming = tk.BooleanVar(value=False)
        self.context_var = tk.StringVar(value='general')

        self.phrases_list = []
        self.create_widgets()

    def create_widgets(self):
        """Cr√©e tous les widgets de l'interface."""
        self.create_header()
        self.create_options_frame()

        self.notebook = ttk.Notebook(self.root)
        self.notebook.grid(row=2, column=0, sticky='nsew', padx=10, pady=5)

        # Tous les onglets avec TOUTES les fonctionnalit√©s
        self.create_simple_comparison_tab()
        self.create_multiple_comparison_tab()
        self.create_matrix_tab()
        self.create_extreme_pairs_tab()  # NOUVEAU
        self.create_demo_tests_tab()  # NOUVEAU - Tests automatiques
        self.create_export_tab()
        self.create_about_tab()

        self.create_status_bar()

    def create_header(self):
        """Cr√©e l'en-t√™te."""
        header_frame = tk.Frame(
            self.root, bg=self.colors['primary'], height=80)
        header_frame.grid(row=0, column=0, sticky='ew')
        header_frame.grid_propagate(False)

        title_label = tk.Label(
            header_frame,
            text="üìä Calculateur de Jaccard v2.2 - Interface Compl√®te",
            font=('Arial', 20, 'bold'),
            bg=self.colors['primary'],
            fg='white'
        )
        title_label.pack(pady=10)

        subtitle_label = tk.Label(
            header_frame,
            text="TOUTES les fonctionnalit√©s de jaccard_similarity.py",
            font=('Arial', 10),
            bg=self.colors['primary'],
            fg=self.colors['light']
        )
        subtitle_label.pack()

    def create_options_frame(self):
        """Cr√©e le cadre des options."""
        options_frame = tk.LabelFrame(
            self.root,
            text="‚öôÔ∏è Configuration Compl√®te",
            font=('Arial', 10, 'bold'),
            padx=10,
            pady=5
        )
        options_frame.grid(row=1, column=0, sticky='ew', padx=10, pady=5)

        row1 = tk.Frame(options_frame)
        row1.pack(fill='x', pady=2)

        tk.Checkbutton(
            row1, text="Sensible √† la casse",
            variable=self.case_sensitive,
            command=self.update_calculator
        ).pack(side='left', padx=15)

        tk.Checkbutton(
            row1, text="Supprimer ponctuation",
            variable=self.remove_punctuation,
            command=self.update_calculator
        ).pack(side='left', padx=15)

        tk.Checkbutton(
            row1, text="Retirer stop-words",
            variable=self.remove_stopwords,
            command=self.update_calculator
        ).pack(side='left', padx=15)

        tk.Checkbutton(
            row1, text="Stemming fran√ßais",
            variable=self.use_stemming,
            command=self.update_calculator
        ).pack(side='left', padx=15)

    def update_calculator(self):
        """Met √† jour le calculateur."""
        self.calculator = JaccardSimilarity(
            case_sensitive=self.case_sensitive.get(),
            remove_punctuation=self.remove_punctuation.get(),
            remove_stopwords=self.remove_stopwords.get(),
            use_stemming=self.use_stemming.get()
        )
        self.update_status("Configuration mise √† jour")

    def create_simple_comparison_tab(self):
        """Onglet de comparaison simple COMPLET."""
        tab = ttk.Frame(self.notebook)
        self.notebook.add(tab, text="  Comparaison Simple  ")

        tab.rowconfigure(0, weight=1)
        tab.columnconfigure(0, weight=1)

        canvas = tk.Canvas(tab, highlightthickness=0)
        scrollbar = ttk.Scrollbar(tab, orient="vertical", command=canvas.yview)
        scrollable_frame = ttk.Frame(canvas)

        scrollable_frame.bind(
            "<Configure>",
            lambda e: canvas.configure(scrollregion=canvas.bbox("all"))
        )

        canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")
        canvas.configure(yscrollcommand=scrollbar.set)

        canvas.grid(row=0, column=0, sticky='nsew', padx=10, pady=10)
        scrollbar.grid(row=0, column=1, sticky='ns')

        scrollable_frame.columnconfigure(0, weight=1)

        # Phrase 1
        tk.Label(scrollable_frame, text="Phrase 1:", font=('Arial', 11, 'bold')).grid(
            row=0, column=0, sticky='w', pady=(10, 5), padx=10)

        self.phrase1_text = scrolledtext.ScrolledText(
            scrollable_frame, height=4, font=('Arial', 10), wrap=tk.WORD)
        self.phrase1_text.grid(row=1, column=0, sticky='ew', pady=5, padx=10)

        # Phrase 2
        tk.Label(scrollable_frame, text="Phrase 2:", font=('Arial', 11, 'bold')).grid(
            row=2, column=0, sticky='w', pady=(10, 5), padx=10)

        self.phrase2_text = scrolledtext.ScrolledText(
            scrollable_frame, height=4, font=('Arial', 10), wrap=tk.WORD)
        self.phrase2_text.grid(row=3, column=0, sticky='ew', pady=5, padx=10)

        # Contexte
        context_frame = tk.LabelFrame(
            scrollable_frame,
            text="üéØ Contexte d'interpr√©tation",
            font=('Arial', 10, 'bold'),
            padx=10, pady=5
        )
        context_frame.grid(row=4, column=0, sticky='ew', pady=10, padx=10)

        contexts = [
            ('G√©n√©ral', 'general'),
            ('Plagiat', 'plagiarism'),
            ('Clustering', 'clustering'),
            ('Recherche', 'search'),
            ('Diversit√©', 'diversity')
        ]

        context_inner = tk.Frame(context_frame)
        context_inner.pack(fill='x', expand=True)

        for label, value in contexts:
            tk.Radiobutton(
                context_inner, text=label,
                variable=self.context_var, value=value
            ).pack(side='left', padx=10, expand=True)

        # Boutons
        button_frame = tk.Frame(scrollable_frame)
        button_frame.grid(row=5, column=0, pady=15, sticky='ew', padx=10)
        button_frame.columnconfigure(0, weight=1)
        button_frame.columnconfigure(1, weight=1)
        button_frame.columnconfigure(2, weight=1)

        tk.Button(
            button_frame, text="üîç Analyse Compl√®te",
            command=self.calculate_complete_analysis,
            bg=self.colors['secondary'], fg='white',
            font=('Arial', 10, 'bold'), pady=8, cursor='hand2'
        ).grid(row=0, column=0, padx=3, sticky='ew')

        tk.Button(
            button_frame, text="üìä D√©tails Techniques",
            command=self.show_technical_details,
            bg=self.colors['purple'], fg='white',
            font=('Arial', 10, 'bold'), pady=8, cursor='hand2'
        ).grid(row=0, column=1, padx=3, sticky='ew')

        tk.Button(
            button_frame, text="üóëÔ∏è Effacer",
            command=self.clear_simple_comparison,
            bg=self.colors['warning'], fg='white',
            font=('Arial', 10, 'bold'), pady=8, cursor='hand2'
        ).grid(row=0, column=2, padx=3, sticky='ew')

        # R√©sultats
        result_frame = tk.LabelFrame(
            scrollable_frame, text="üìä R√©sultats Complets",
            font=('Arial', 10, 'bold'), padx=10, pady=10
        )
        result_frame.grid(row=6, column=0, sticky='ew', pady=10, padx=10)
        result_frame.columnconfigure(0, weight=1)

        self.simple_result_text = scrolledtext.ScrolledText(
            result_frame, height=20, font=('Courier', 9),
            wrap=tk.WORD, state='disabled'
        )
        self.simple_result_text.pack(fill='both', expand=True)

    def calculate_complete_analysis(self):
        """Analyse COMPL√àTE avec toutes les m√©triques."""
        phrase1 = self.phrase1_text.get("1.0", tk.END).strip()
        phrase2 = self.phrase2_text.get("1.0", tk.END).strip()

        if not phrase1 or not phrase2:
            messagebox.showwarning(
                "Attention", "Veuillez saisir les deux phrases.")
            return

        try:
            # Calcul d√©taill√© complet
            result = self.calculator.calculate_distance_detailed(
                phrase1, phrase2)
            similarity = result['jaccard_similarity']
            distance = result['jaccard_distance']

            context = self.context_var.get()
            sim_interp = self.calculator.interpret_similarity(
                similarity, context=context)
            dist_interp = self.calculator.interpret_distance(
                distance, context=context)

            output = f"""
{'='*75}
ANALYSE COMPL√àTE - SIMILARIT√â DE JACCARD
{'='*75}

üìù PHRASES ANALYS√âES:
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
Phrase 1: "{result['sentence1']}"
Phrase 2: "{result['sentence2']}"

‚öôÔ∏è  CONFIGURATION ACTIVE:
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
‚Ä¢ Sensibilit√© √† la casse: {'OUI' if self.case_sensitive.get() else 'NON'}
‚Ä¢ Suppression ponctuation: {'OUI' if self.remove_punctuation.get() else 'NON'}
‚Ä¢ Stop-words retir√©s: {'OUI' if self.remove_stopwords.get() else 'NON'}
‚Ä¢ Stemming appliqu√©: {'OUI' if self.use_stemming.get() else 'NON'}
‚Ä¢ Contexte d'analyse: {context.upper()}

üî§ ANALYSE DES ENSEMBLES DE MOTS:
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
Ensemble 1 ({len(result['words_set1'])} mots):
  {sorted(result['words_set1'])}

Ensemble 2 ({len(result['words_set2'])} mots):
  {sorted(result['words_set2'])}

‚à© INTERSECTION ({result['intersection_size']} mots communs):
  {sorted(result['intersection'])}

‚à™ UNION ({result['union_size']} mots uniques total):
  {sorted(result['union'])}

üìä M√âTRIQUES DE SIMILARIT√â:
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
Score de Similarit√©: {similarity:.4f} ({similarity*100:.2f}%)
Cat√©gorie: {sim_interp['emoji']} {sim_interp['category']}

üí° Interpr√©tation G√©n√©rale:
{sim_interp['general_interpretation']}

üéØ Interpr√©tation Contextuelle ({context}):
{sim_interp['contextual_interpretation']}

üìñ Explication Technique:
{sim_interp['technical_explanation']}

üìå Recommandations:
"""
            for rec in sim_interp['recommendations']:
                output += f"  ‚Ä¢ {rec}\n"

            output += f"""
üìè M√âTRIQUES DE DISTANCE:
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
Score de Distance: {distance:.4f} ({distance*100:.2f}%)
Cat√©gorie: {dist_interp['emoji']} {dist_interp['category']}

üí° Interpr√©tation G√©n√©rale:
{dist_interp['general_interpretation']}

üéØ Interpr√©tation Contextuelle ({context}):
{dist_interp['contextual_interpretation']}

üìñ Explication Technique:
{dist_interp['technical_explanation']}

üìå Recommandations:
"""
            for rec in dist_interp['recommendations']:
                output += f"  ‚Ä¢ {rec}\n"

            output += f"""
‚úì V√âRIFICATION MATH√âMATIQUE:
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
Similarit√© ({similarity:.4f}) + Distance ({distance:.4f}) = {similarity + distance:.4f}
Formule: J(A,B) = |A ‚à© B| / |A ‚à™ B| = {result['intersection_size']}/{result['union_size']} = {similarity:.4f}

{'='*75}
"""

            self.simple_result_text.config(state='normal')
            self.simple_result_text.delete("1.0", tk.END)
            self.simple_result_text.insert("1.0", output)
            self.simple_result_text.config(state='disabled')

            self.update_status(
                f"Analyse termin√©e | Sim: {similarity:.4f} | Dist: {distance:.4f} | Contexte: {context}")

        except Exception as e:
            messagebox.showerror("Erreur", f"Erreur:\n{str(e)}")

    def show_technical_details(self):
        """Affiche les d√©tails techniques COMPLETS."""
        phrase1 = self.phrase1_text.get("1.0", tk.END).strip()
        phrase2 = self.phrase2_text.get("1.0", tk.END).strip()

        if not phrase1 or not phrase2:
            messagebox.showwarning(
                "Attention", "Veuillez saisir les deux phrases.")
            return

        try:
            # Pr√©traitement d√©taill√©
            set1 = self.calculator.preprocess_sentence(phrase1)
            set2 = self.calculator.preprocess_sentence(phrase2)

            intersection = set1.intersection(set2)
            union = set1.union(set2)
            diff1 = set1.difference(set2)
            diff2 = set2.difference(set1)

            similarity = len(intersection) / \
                len(union) if len(union) > 0 else 0.0

            output = f"""
{'='*75}
D√âTAILS TECHNIQUES COMPLETS
{'='*75}

üìã PR√âTRAITEMENT:
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
Phrase originale 1: "{phrase1}"
Apr√®s pr√©traitement: {sorted(set1)}

Phrase originale 2: "{phrase2}"
Apr√®s pr√©traitement: {sorted(set2)}

üî¢ OP√âRATIONS SUR ENSEMBLES:
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
|A| = {len(set1)} mots
|B| = {len(set2)} mots

|A ‚à© B| = {len(intersection)} mots
Intersection: {sorted(intersection)}

|A ‚à™ B| = {len(union)} mots
Union: {sorted(union)}

|A - B| = {len(diff1)} mots (uniquement dans A)
Diff√©rence A-B: {sorted(diff1)}

|B - A| = {len(diff2)} mots (uniquement dans B)
Diff√©rence B-A: {sorted(diff2)}

üìê CALCULS MATH√âMATIQUES:
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
Similarit√© de Jaccard:
J(A,B) = |A ‚à© B| / |A ‚à™ B|
J(A,B) = {len(intersection)} / {len(union)}
J(A,B) = {similarity:.6f}

Distance de Jaccard:
d(A,B) = 1 - J(A,B)
d(A,B) = 1 - {similarity:.6f}
d(A,B) = {1-similarity:.6f}

üìä STATISTIQUES:
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
Taux de chevauchement: {(len(intersection)/max(len(set1), len(set2))*100) if max(len(set1), len(set2)) > 0 else 0:.2f}%
Mots communs/Phrase 1: {(len(intersection)/len(set1)*100) if len(set1) > 0 else 0:.2f}%
Mots communs/Phrase 2: {(len(intersection)/len(set2)*100) if len(set2) > 0 else 0:.2f}%

{'='*75}
"""

            self.simple_result_text.config(state='normal')
            self.simple_result_text.delete("1.0", tk.END)
            self.simple_result_text.insert("1.0", output)
            self.simple_result_text.config(state='disabled')

            self.update_status("D√©tails techniques affich√©s")

        except Exception as e:
            messagebox.showerror("Erreur", f"Erreur:\n{str(e)}")

    def clear_simple_comparison(self):
        """Efface les champs."""
        self.phrase1_text.delete("1.0", tk.END)
        self.phrase2_text.delete("1.0", tk.END)
        self.simple_result_text.config(state='normal')
        self.simple_result_text.delete("1.0", tk.END)
        self.simple_result_text.config(state='disabled')
        self.update_status("Champs effac√©s")

    def create_multiple_comparison_tab(self):
        """Onglet de comparaison multiple."""
        tab = ttk.Frame(self.notebook)
        self.notebook.add(tab, text="  Comparaison Multiple  ")

        tab.rowconfigure(2, weight=1)
        tab.rowconfigure(4, weight=1)
        tab.columnconfigure(0, weight=1)

        input_frame = tk.LabelFrame(
            tab, text="üìù Ajouter des phrases",
            font=('Arial', 10, 'bold'), padx=10, pady=10
        )
        input_frame.grid(row=0, column=0, sticky='ew', padx=10, pady=10)
        input_frame.columnconfigure(0, weight=1)

        tk.Label(input_frame, text="Nouvelle phrase:").grid(
            row=0, column=0, sticky='w', pady=(0, 5))

        phrase_entry_frame = tk.Frame(input_frame)
        phrase_entry_frame.grid(row=1, column=0, sticky='ew')
        phrase_entry_frame.columnconfigure(0, weight=1)

        self.multi_phrase_entry = tk.Entry(
            phrase_entry_frame, font=('Arial', 10))
        self.multi_phrase_entry.grid(row=0, column=0, sticky='ew', padx=(0, 5))
        self.multi_phrase_entry.bind('<Return>', lambda e: self.add_phrase())

        tk.Button(
            phrase_entry_frame, text="‚ûï Ajouter", command=self.add_phrase,
            bg=self.colors['success'], fg='white', font=('Arial', 10, 'bold')
        ).grid(row=0, column=1)

        list_frame = tk.LabelFrame(
            tab, text="üìã Phrases √† comparer",
            font=('Arial', 10, 'bold'), padx=10, pady=10
        )
        list_frame.grid(row=2, column=0, sticky='nsew', padx=10, pady=10)
        list_frame.rowconfigure(0, weight=1)
        list_frame.columnconfigure(0, weight=1)

        scrollbar = tk.Scrollbar(list_frame)
        scrollbar.grid(row=0, column=1, sticky='ns')

        self.phrases_listbox = tk.Listbox(
            list_frame, font=('Arial', 10),
            yscrollcommand=scrollbar.set, selectmode=tk.SINGLE
        )
        self.phrases_listbox.grid(row=0, column=0, sticky='nsew')
        scrollbar.config(command=self.phrases_listbox.yview)

        button_frame = tk.Frame(tab)
        button_frame.grid(row=3, column=0, pady=10, sticky='ew', padx=10)
        for i in range(3):
            button_frame.columnconfigure(i, weight=1)

        tk.Button(
            button_frame, text="üîç Comparer Toutes",
            command=self.compare_multiple_phrases,
            bg=self.colors['secondary'], fg='white',
            font=('Arial', 10, 'bold'), pady=8
        ).grid(row=0, column=0, padx=5, sticky='ew')

        tk.Button(
            button_frame, text="‚ûñ Supprimer",
            command=self.remove_phrase,
            bg=self.colors['danger'], fg='white',
            font=('Arial', 10, 'bold'), pady=8
        ).grid(row=0, column=1, padx=5, sticky='ew')

        tk.Button(
            button_frame, text="üóëÔ∏è Tout Effacer",
            command=self.clear_all_phrases,
            bg=self.colors['warning'], fg='white',
            font=('Arial', 10, 'bold'), pady=8
        ).grid(row=0, column=2, padx=5, sticky='ew')

        result_frame = tk.LabelFrame(
            tab, text="üìä R√©sultats",
            font=('Arial', 10, 'bold'), padx=10, pady=10
        )
        result_frame.grid(row=4, column=0, sticky='nsew', padx=10, pady=10)
        result_frame.rowconfigure(0, weight=1)
        result_frame.columnconfigure(0, weight=1)

        self.multi_result_text = scrolledtext.ScrolledText(
            result_frame, font=('Courier', 9), wrap=tk.WORD, state='disabled')
        self.multi_result_text.pack(fill='both', expand=True)

    def add_phrase(self):
        """Ajoute une phrase."""
        phrase = self.multi_phrase_entry.get().strip()
        if not phrase:
            messagebox.showwarning("Attention", "Veuillez saisir une phrase.")
            return
        if phrase in self.phrases_list:
            messagebox.showinfo("Information", "Cette phrase existe d√©j√†.")
            return
        self.phrases_list.append(phrase)
        self.phrases_listbox.insert(
            tk.END, f"{len(self.phrases_list)}. {phrase}")
        self.multi_phrase_entry.delete(0, tk.END)
        self.update_status(
            f"Phrase ajout√©e ({len(self.phrases_list)} phrases)")

    def remove_phrase(self):
        """Supprime la phrase s√©lectionn√©e."""
        selection = self.phrases_listbox.curselection()
        if not selection:
            messagebox.showwarning(
                "Attention", "Veuillez s√©lectionner une phrase.")
            return
        index = selection[0]
        del self.phrases_list[index]
        self.phrases_listbox.delete(0, tk.END)
        for i, phrase in enumerate(self.phrases_list, 1):
            self.phrases_listbox.insert(tk.END, f"{i}. {phrase}")
        self.update_status(
            f"Phrase supprim√©e ({len(self.phrases_list)} restantes)")

    def clear_all_phrases(self):
        """Efface toutes les phrases."""
        if self.phrases_list:
            if messagebox.askyesno("Confirmation", "Effacer toutes les phrases?"):
                self.phrases_list.clear()
                self.phrases_listbox.delete(0, tk.END)
                self.multi_result_text.config(state='normal')
                self.multi_result_text.delete("1.0", tk.END)
                self.multi_result_text.config(state='disabled')
                self.update_status("Toutes les phrases effac√©es")

    def compare_multiple_phrases(self):
        """Compare toutes les phrases."""
        if len(self.phrases_list) < 2:
            messagebox.showwarning("Attention", "Au moins 2 phrases requises.")
            return

        try:
            results = self.calculator.compare_multiple_sentences(
                self.phrases_list)
            results.sort(key=lambda x: x[2], reverse=True)

            output = f"""
{'='*70}
COMPARAISON MULTIPLE DE PHRASES
{'='*70}

Nombre de phrases: {len(self.phrases_list)}
Nombre de comparaisons: {len(results)}

{'‚îÄ'*70}
TOP 10 PAIRES LES PLUS SIMILAIRES:
{'‚îÄ'*70}
"""
            for i, (idx1, idx2, sim) in enumerate(results[:10], 1):
                output += f"\n{i}. Similarit√©: {sim:.4f}\n"
                output += f"   Phrase {idx1+1}: {self.phrases_list[idx1][:60]}...\n"
                output += f"   Phrase {idx2+1}: {self.phrases_list[idx2][:60]}...\n"

            idx1, idx2, max_sim = self.calculator.get_most_similar_pair(
                self.phrases_list)
            output += f"\n{'‚îÄ'*70}\nüèÜ PAIRE LA PLUS SIMILAIRE:\n"
            output += f"Phrases {idx1+1} et {idx2+1}: {max_sim:.4f}\n"

            idx1, idx2, max_dist = self.calculator.get_most_different_pair(
                self.phrases_list)
            output += f"\nüìè PAIRE LA PLUS DIFF√âRENTE:\n"
            output += f"Phrases {idx1+1} et {idx2+1}: {max_dist:.4f} (distance)\n"
            output += f"{'='*70}\n"

            self.multi_result_text.config(state='normal')
            self.multi_result_text.delete("1.0", tk.END)
            self.multi_result_text.insert("1.0", output)
            self.multi_result_text.config(state='disabled')

            self.update_status(f"Comparaison: {len(results)} paires analys√©es")

        except Exception as e:
            messagebox.showerror("Erreur", f"Erreur:\n{str(e)}")

    def create_matrix_tab(self):
        """Onglet matrices."""
        tab = ttk.Frame(self.notebook)
        self.notebook.add(tab, text="  Matrices  ")

        tab.rowconfigure(2, weight=1)
        tab.columnconfigure(0, weight=1)

        info_label = tk.Label(
            tab,
            text="Matrices de similarit√© et distance pour les phrases de 'Comparaison Multiple'.",
            font=('Arial', 10), wraplength=900
        )
        info_label.grid(row=0, column=0, pady=10, padx=20, sticky='w')

        button_frame = tk.Frame(tab)
        button_frame.grid(row=1, column=0, pady=10, sticky='ew', padx=10)
        button_frame.columnconfigure(0, weight=1)
        button_frame.columnconfigure(1, weight=1)

        tk.Button(
            button_frame, text="üìä Matrice Similarit√©",
            command=lambda: self.generate_matrix('similarity'),
            bg=self.colors['secondary'], fg='white',
            font=('Arial', 11, 'bold'), padx=20, pady=10
        ).grid(row=0, column=0, padx=5, sticky='ew')

        tk.Button(
            button_frame, text="üìè Matrice Distance",
            command=lambda: self.generate_matrix('distance'),
            bg=self.colors['primary'], fg='white',
            font=('Arial', 11, 'bold'), padx=20, pady=10
        ).grid(row=0, column=1, padx=5, sticky='ew')

        matrix_frame = tk.LabelFrame(
            tab, text="üî¢ Matrice",
            font=('Arial', 10, 'bold'), padx=10, pady=10
        )
        matrix_frame.grid(row=2, column=0, sticky='nsew', padx=10, pady=10)
        matrix_frame.rowconfigure(0, weight=1)
        matrix_frame.columnconfigure(0, weight=1)

        self.matrix_text = scrolledtext.ScrolledText(
            matrix_frame, font=('Courier', 9), wrap=tk.NONE, state='disabled')
        self.matrix_text.grid(row=0, column=0, sticky='nsew')

        xscrollbar = tk.Scrollbar(matrix_frame, orient='horizontal')
        xscrollbar.grid(row=1, column=0, sticky='ew')
        self.matrix_text.config(xscrollcommand=xscrollbar.set)
        xscrollbar.config(command=self.matrix_text.xview)

    def generate_matrix(self, matrix_type='similarity'):
        """G√©n√®re la matrice."""
        if len(self.phrases_list) < 2:
            messagebox.showwarning("Attention", "Au moins 2 phrases requises.")
            return

        try:
            if matrix_type == 'similarity':
                matrix = self.calculator.get_similarity_matrix(
                    self.phrases_list)
                title = "MATRICE DE SIMILARIT√â"
                legend = "Valeurs √©lev√©es = tr√®s similaires"
            else:
                matrix = self.calculator.get_distance_matrix(self.phrases_list)
                title = "MATRICE DE DISTANCE"
                legend = "Valeurs √©lev√©es = tr√®s diff√©rents"

            output = f"""
{'='*70}
{title}
{'='*70}

Phrases analys√©es:
"""
            for i, phrase in enumerate(self.phrases_list):
                output += f"  {i}: {phrase[:60]}...\n"

            output += f"\n{'‚îÄ'*70}\nMatrice:\n\n     "
            for i in range(len(self.phrases_list)):
                output += f"{i:8}"
            output += "\n"

            for i, row in enumerate(matrix):
                output += f"{i:3}: "
                for value in row:
                    output += f"{value:8.4f}"
                output += "\n"

            output += f"\n{'='*70}\nL√©gende:\n"
            output += f"  ‚Ä¢ Diagonale = {'1.00' if matrix_type == 'similarity' else '0.00'}\n"
            output += f"  ‚Ä¢ {legend}\n"
            output += f"{'='*70}\n"

            self.matrix_text.config(state='normal')
            self.matrix_text.delete("1.0", tk.END)
            self.matrix_text.insert("1.0", output)
            self.matrix_text.config(state='disabled')

            self.update_status(f"Matrice {matrix_type} g√©n√©r√©e")

        except Exception as e:
            messagebox.showerror("Erreur", f"Erreur:\n{str(e)}")

    def create_extreme_pairs_tab(self):
        """NOUVEAU: Onglet paires extr√™mes."""
        tab = ttk.Frame(self.notebook)
        self.notebook.add(tab, text="  Paires Extr√™mes  ")

        tab.rowconfigure(1, weight=1)
        tab.columnconfigure(0, weight=1)

        info_frame = tk.LabelFrame(
            tab, text="‚ÑπÔ∏è Information",
            font=('Arial', 10, 'bold'), padx=10, pady=10
        )
        info_frame.grid(row=0, column=0, sticky='ew', padx=10, pady=10)

        tk.Label(
            info_frame,
            text="Recherche automatique des paires les plus similaires et les plus diff√©rentes.",
            font=('Arial', 10), wraplength=900
        ).pack()

        button_frame = tk.Frame(tab)
        button_frame.grid(row=1, column=0, pady=10, sticky='ew', padx=10)
        button_frame.columnconfigure(0, weight=1)
        button_frame.columnconfigure(1, weight=1)

        tk.Button(
            button_frame, text="üèÜ Paire la Plus Similaire",
            command=self.find_most_similar,
            bg=self.colors['success'], fg='white',
            font=('Arial', 11, 'bold'), padx=20, pady=15
        ).grid(row=0, column=0, padx=5, sticky='ew')

        tk.Button(
            button_frame, text="üìè Paire la Plus Diff√©rente",
            command=self.find_most_different,
            bg=self.colors['danger'], fg='white',
            font=('Arial', 11, 'bold'), padx=20, pady=15
        ).grid(row=0, column=1, padx=5, sticky='ew')

        result_frame = tk.LabelFrame(
            tab, text="üìä R√©sultats",
            font=('Arial', 10, 'bold'), padx=10, pady=10
        )
        result_frame.grid(row=2, column=0, sticky='nsew', padx=10, pady=10)
        result_frame.rowconfigure(0, weight=1)
        result_frame.columnconfigure(0, weight=1)

        self.extreme_result_text = scrolledtext.ScrolledText(
            result_frame, font=('Courier', 9), wrap=tk.WORD, state='disabled')
        self.extreme_result_text.pack(fill='both', expand=True)

    def find_most_similar(self):
        """Trouve la paire la plus similaire."""
        if len(self.phrases_list) < 2:
            messagebox.showwarning("Attention", "Au moins 2 phrases requises.")
            return

        try:
            idx1, idx2, similarity = self.calculator.get_most_similar_pair(
                self.phrases_list)

            result = self.calculator.calculate_distance_detailed(
                self.phrases_list[idx1], self.phrases_list[idx2])

            interp = self.calculator.interpret_similarity(similarity)

            output = f"""
{'='*70}
üèÜ PAIRE LA PLUS SIMILAIRE
{'='*70}

Phrase {idx1+1}: "{self.phrases_list[idx1]}"
Phrase {idx2+1}: "{self.phrases_list[idx2]}"

üìä SCORE DE SIMILARIT√â: {similarity:.4f} ({similarity*100:.2f}%)
{interp['emoji']} Cat√©gorie: {interp['category']}

üî§ ANALYSE:
Mots communs ({result['intersection_size']}): {sorted(result['intersection'])}
Mots total ({result['union_size']}): {sorted(result['union'])}

üí° INTERPR√âTATION:
{interp['general_interpretation']}

üìå RECOMMANDATIONS:
"""
            for rec in interp['recommendations']:
                output += f"  ‚Ä¢ {rec}\n"

            output += f"\n{'='*70}\n"

            self.extreme_result_text.config(state='normal')
            self.extreme_result_text.delete("1.0", tk.END)
            self.extreme_result_text.insert("1.0", output)
            self.extreme_result_text.config(state='disabled')

            self.update_status(f"Paire la plus similaire: {similarity:.4f}")

        except Exception as e:
            messagebox.showerror("Erreur", f"Erreur:\n{str(e)}")

    def find_most_different(self):
        """Trouve la paire la plus diff√©rente."""
        if len(self.phrases_list) < 2:
            messagebox.showwarning("Attention", "Au moins 2 phrases requises.")
            return

        try:
            idx1, idx2, distance = self.calculator.get_most_different_pair(
                self.phrases_list)

            result = self.calculator.calculate_distance_detailed(
                self.phrases_list[idx1], self.phrases_list[idx2])

            interp = self.calculator.interpret_distance(distance)

            output = f"""
{'='*70}
üìè PAIRE LA PLUS DIFF√âRENTE
{'='*70}

Phrase {idx1+1}: "{self.phrases_list[idx1]}"
Phrase {idx2+1}: "{self.phrases_list[idx2]}"

üìè SCORE DE DISTANCE: {distance:.4f} ({distance*100:.2f}%)
{interp['emoji']} Cat√©gorie: {interp['category']}

üî§ ANALYSE:
Mots communs ({result['intersection_size']}): {sorted(result['intersection'])}
Mots total ({result['union_size']}): {sorted(result['union'])}

üí° INTERPR√âTATION:
{interp['general_interpretation']}

üìå RECOMMANDATIONS:
"""
            for rec in interp['recommendations']:
                output += f"  ‚Ä¢ {rec}\n"

            output += f"\n{'='*70}\n"

            self.extreme_result_text.config(state='normal')
            self.extreme_result_text.delete("1.0", tk.END)
            self.extreme_result_text.insert("1.0", output)
            self.extreme_result_text.config(state='disabled')

            self.update_status(f"Paire la plus diff√©rente: {distance:.4f}")

        except Exception as e:
            messagebox.showerror("Erreur", f"Erreur:\n{str(e)}")

    def create_demo_tests_tab(self):
        """NOUVEAU: Onglet tests automatiques."""
        tab = ttk.Frame(self.notebook)
        self.notebook.add(tab, text="  Tests Auto  ")

        tab.rowconfigure(1, weight=1)
        tab.columnconfigure(0, weight=1)

        info_frame = tk.LabelFrame(
            tab, text="üß™ Tests Automatiques",
            font=('Arial', 10, 'bold'), padx=10, pady=10
        )
        info_frame.grid(row=0, column=0, sticky='ew', padx=10, pady=10)

        tk.Label(
            info_frame,
            text="Lance des tests de d√©monstration comme jaccard_similarity.py",
            font=('Arial', 10)
        ).pack()

        tk.Button(
            tab, text="‚ñ∂Ô∏è Lancer Tests de D√©monstration",
            command=self.run_demo_tests,
            bg=self.colors['success'], fg='white',
            font=('Arial', 12, 'bold'), padx=30, pady=15
        ).grid(row=1, column=0, pady=20)

        result_frame = tk.LabelFrame(
            tab, text="üìä R√©sultats des Tests",
            font=('Arial', 10, 'bold'), padx=10, pady=10
        )
        result_frame.grid(row=2, column=0, sticky='nsew', padx=10, pady=10)
        result_frame.rowconfigure(0, weight=1)
        result_frame.columnconfigure(0, weight=1)

        self.demo_result_text = scrolledtext.ScrolledText(
            result_frame, font=('Courier', 9), wrap=tk.WORD, state='disabled')
        self.demo_result_text.pack(fill='both', expand=True)

    def run_demo_tests(self):
        """Lance les tests de d√©monstration."""
        examples = [
            ("Le chat mange des croquettes", "Le chien mange des croquettes"),
            ("Python est un langage de programmation",
             "Java est un langage de programmation"),
            ("Machine learning supervis√©", "Apprentissage automatique supervis√©"),
            ("Bonjour tout le monde", "Salut tout le monde"),
            ("Aucun mot en commun", "Diff√©rentes phrases compl√®tement")
        ]

        output = f"""
{'='*70}
TESTS DE D√âMONSTRATION AUTOMATIQUES
{'='*70}

Configuration active:
  - Sensibilit√© √† la casse: {'Activ√©e' if self.case_sensitive.get() else 'D√©sactiv√©e'}
  - Stop-words: {'Activ√©s' if self.remove_stopwords.get() else 'D√©sactiv√©s'}
  - Stemming: {'Activ√©' if self.use_stemming.get() else 'D√©sactiv√©'}

{'‚îÄ'*70}
TESTS:
{'‚îÄ'*70}
"""

        for i, (s1, s2) in enumerate(examples, 1):
            similarity = self.calculator.calculate_similarity(s1, s2)
            distance = self.calculator.calculate_distance(s1, s2)

            sim_interp = self.calculator.interpret_similarity(similarity)
            dist_interp = self.calculator.interpret_distance(distance)

            output += f"""
Test {i}:
  Phrase 1: '{s1}'
  Phrase 2: '{s2}'

  üìä SIMILARIT√â: {similarity:.4f}
     Cat√©gorie: {sim_interp['emoji']} {sim_interp['category']}
     {sim_interp['general_interpretation'][:100]}...

  üìè DISTANCE: {distance:.4f}
     Cat√©gorie: {dist_interp['emoji']} {dist_interp['category']}

  ‚úì V√©rification: {similarity:.4f} + {distance:.4f} = {similarity + distance:.4f}
{'‚îÄ'*70}
"""

        output += f"\n{'='*70}\nTOUS LES TESTS TERMIN√âS\n{'='*70}\n"

        self.demo_result_text.config(state='normal')
        self.demo_result_text.delete("1.0", tk.END)
        self.demo_result_text.insert("1.0", output)
        self.demo_result_text.config(state='disabled')

        self.update_status(f"{len(examples)} tests de d√©monstration termin√©s")

    def create_export_tab(self):
        """Onglet export."""
        tab = ttk.Frame(self.notebook)
        self.notebook.add(tab, text="  Export  ")

        main_frame = tk.Frame(tab)
        main_frame.pack(fill='both', expand=True, padx=30, pady=30)

        tk.Label(
            main_frame, text="Export des R√©sultats",
            font=('Arial', 16, 'bold')
        ).pack(pady=20)

        tk.Label(
            main_frame,
            text="Exportez les r√©sultats au format CSV ou JSON",
            font=('Arial', 11), wraplength=600
        ).pack(pady=10)

        button_frame = tk.Frame(main_frame)
        button_frame.pack(pady=30)

        tk.Button(
            button_frame, text="üíæ Exporter CSV",
            command=lambda: self.export_results('csv'),
            bg=self.colors['success'], fg='white',
            font=('Arial', 12, 'bold'), padx=30, pady=15
        ).pack(side='left', padx=10)

        tk.Button(
            button_frame, text="üíæ Exporter JSON",
            command=lambda: self.export_results('json'),
            bg=self.colors['secondary'], fg='white',
            font=('Arial', 12, 'bold'), padx=30, pady=15
        ).pack(side='left', padx=10)

        self.export_status = tk.Label(main_frame, text="", font=('Arial', 10))
        self.export_status.pack(pady=20)

    def export_results(self, format_type):
        """Exporte les r√©sultats."""
        if len(self.phrases_list) < 2:
            messagebox.showwarning("Attention", "Au moins 2 phrases requises.")
            return

        try:
            results = []
            for i in range(len(self.phrases_list)):
                for j in range(i + 1, len(self.phrases_list)):
                    detailed = self.calculator.calculate_distance_detailed(
                        self.phrases_list[i], self.phrases_list[j])
                    results.append(detailed)

            if format_type == 'csv':
                filename = self.calculator.export_results_to_csv(results)
            else:
                filename = self.calculator.export_results_to_json(results)

            if filename:
                self.export_status.config(
                    text=f"‚úì Export r√©ussi: {filename}",
                    fg=self.colors['success']
                )
                messagebox.showinfo("Succ√®s", f"Fichier cr√©√©:\n{filename}")
            else:
                self.export_status.config(
                    text="‚ùå √âchec de l'export",
                    fg=self.colors['danger']
                )

        except Exception as e:
            messagebox.showerror("Erreur", f"Erreur:\n{str(e)}")

    def create_about_tab(self):
        """Onglet √Ä propos."""
        tab = ttk.Frame(self.notebook)
        self.notebook.add(tab, text="  ‚ÑπÔ∏è √Ä Propos  ")

        main_frame = tk.Frame(tab, bg='white')
        main_frame.pack(fill='both', expand=True, padx=30, pady=30)

        tk.Label(
            main_frame,
            text="Calculateur de Similarit√© de Jaccard",
            font=('Arial', 16, 'bold'), bg='white', fg=self.colors['primary']
        ).pack(pady=10)

        description = """
‚ú® Version 2.2 - Interface Graphique Compl√®te

Cette interface impl√©mente TOUTES les fonctionnalit√©s de jaccard_similarity.py:

‚Ä¢ Calcul de similarit√© ET distance de Jaccard
‚Ä¢ Stemming fran√ßais am√©lior√©
‚Ä¢ Support des stop-words fran√ßais (60+)
‚Ä¢ Interpr√©tation contextuelle (5 contextes)
‚Ä¢ Export CSV et JSON
‚Ä¢ Tests automatiques de d√©monstration
‚Ä¢ Recherche de paires extr√™mes
‚Ä¢ Matrices compl√®tes
‚Ä¢ Analyse technique d√©taill√©e
‚Ä¢ Interface flexible et responsive

üìê Formules:
Similarit√©(A,B) = |A ‚à© B| / |A ‚à™ B|
Distance(A,B) = 1 - Similarit√©(A,B)
        """

        tk.Label(
            main_frame, text=description, font=('Arial', 10),
            bg='white', justify='left'
        ).pack(pady=20)

        team_frame = tk.LabelFrame(
            main_frame, text="üë• √âquipe",
            font=('Arial', 11, 'bold'), bg='white', padx=20, pady=15
        )
        team_frame.pack(fill='x', pady=10)

        for member in ["OUEDRAOGO Lassina", "OUEDRAOGO Rasmane", "POUBERE Abdourazakou"]:
            tk.Label(
                team_frame, text=f"‚Ä¢ {member}",
                font=('Arial', 10), bg='white'
            ).pack(anchor='w', pady=2)

        tk.Label(
            main_frame,
            text="üìö Machine Learning non Supervis√©\nüéì Octobre 2025 - Version Compl√®te v2.2",
            font=('Arial', 10), bg='white', fg=self.colors['dark']
        ).pack(pady=20)

    def create_status_bar(self):
        """Cr√©e la barre de statut."""
        self.status_bar = tk.Label(
            self.root,
            text="Pr√™t | Interface Compl√®te avec TOUTES les fonctionnalit√©s",
            bd=1, relief=tk.SUNKEN, anchor='w', font=('Arial', 9)
        )
        self.status_bar.grid(row=3, column=0, sticky='ew')

    def update_status(self, message):
        """Met √† jour le statut."""
        self.status_bar.config(text=message)
        self.root.update_idletasks()


def main():
    """Point d'entr√©e."""
    root = tk.Tk()
    app = JaccardGUI(root)
    root.mainloop()


if __name__ == "__main__":
    main()
